name: Build and Deploy with Evidence and Policy Check

on:
  [workflow_dispatch]

permissions:
  id-token: write
  contents: read

# Global variables
env:
  # Name for the Docker image
  IMAGE_NAME: example-project-image
  # Name of the Docker Registry; i.e., the JFrog Cloud server base URL
  DOKCER_REGISTRY: tomjfrog.jfrog.io
  # Virtual repository for the Docker image build and deploy operations
  DOCKER_VIRTUAL: evdemo-docker-virtual
  # Local Docker repository member of the virtual repository.  Required for Evidence attachment
  DOCKER_LOCAL: evdemo-docker-local
  # Name of the generic repo for the README file
  GENERIC_DEV_LOCAL: evdemo-generic-local
#  GENERIC_QA_LOCAL: evdemo-generic-local
  # Name of the signing key residing in the JFrog Artifactory
  PRIVATE_KEY_NAME: ${{ secrets.PRIVATE_KEY_NAME }}
  # Name of the Docker Metadata file
  DOCKER_METADATA: build-metadata
  # Name of the Build
  BUILD_NAME: evdemo-build
  # Public Key Alias Name of the "Public Key" uploaded to the JFrog Platform under "Keys Management"
  # Used to verify the signature on attached evidence
  KEY_ALIAS: evidence-key


jobs:
  Docker-Build-With-Evidence:
    runs-on: ubuntu-latest

    steps:
      - name: Install JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        id: cli
        env:
          JF_URL: ${{ vars.JF_URL }}
          JF_PROJECT: ${{ vars.PROJECT_NAME }}
        with:
          oidc-provider-name: github-oidc-integration
          oidc-audience: jfrog-github
          disable-auto-build-publish: true

      - uses: actions/checkout@v4

      - name: Log in to Artifactory Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.ARTIFACTORY_URL }}
          username: ${{ steps.cli.outputs.oidc-user }}
          password: ${{ steps.cli.outputs.oidc-token }}

      - name: Set up QEMU
        id: setup-qemu
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: setup-buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64
          install: true

      - name: Setup Signing Key
        id: setup-signing-key
        run: |
          echo "${{ secrets.PRIVATE_KEY_EXPORT }}" > "${{ secrets.PRIVATE_KEY_NAME }}"
          chmod 600 ${{ secrets.PRIVATE_KEY_NAME }}
          openssl rsa -in ${{ secrets.PRIVATE_KEY_NAME }} -check

      - name: Build Docker image
        run: |
          URL=$(echo ${{ vars.ARTIFACTORY_URL }} | sed 's|^https://||')
          REPO_URL=${URL}'/${{ env.DOCKER_VIRTUAL}}'
          docker build \
          --build-arg REPO_URL=${REPO_URL} \
          -f Dockerfile . \
          --tag ${REPO_URL}/${{ env.IMAGE_NAME }}:${{ github.run_number }} \
          --output=type=image \
          --platform linux/amd64 \
          --metadata-file=${{ env.DOCKER_METADATA }} \
          --push

      - name: Create Docker Build Info
        run: |
          jf rt build-docker-create ${{ vars.DOCKER_VIRTUAL}} \
          --image-file ${{ env.DOCKER_METADATA }} \
          --build-name ${{ vars.BUILD_NAME }} \
          --build-number ${{ github.run_number }}

      - name: Create and Attach Evidence on Docker Image
        run: |
          echo '{ "actor": "${{ github.actor }}", "date": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'" }' > sign.json
          jf evd create \
          --package-name ${{ env.IMAGE_NAME }} \
          --package-version ${{ github.run_number }} \
          --package-repo-name ${{ env.DOCKER_LOCAL }} \
          --key "${{ env.PRIVATE_KEY_NAME }}" \
          --key-alias ${{ env.KEY_ALIAS }} \
          --predicate ./sign.json \
          --predicate-type https://jfrog.com/evidence/signature/v1 
          echo '🔎 Evidence attached: `signature` 🔏 ' 

      - name: Upload README file
        run: |
          jf rt upload ./README.md ${{ env.GENERIC_LOCAL }}/readme/${{ github.run_number }}/ \
          --build-name ${{ vars.BUILD_NAME }} \
          --build-number ${{ github.run_number }}

      - name: Attach Evidence on README file
        run: |
          jf evd create \
          --subject-repo-path ${{ env.GENERIC_LOCAL }}/readme/${{ github.run_number }}/README.md \
          --key "${{ env.PRIVATE_KEY_NAME }}" \
          --key-alias ${{ env.KEY_ALIAS }} \
          --predicate ./sign.json \
          --predicate-type https://jfrog.com/evidence/signature/v1

      - name: Decorate Build Info with Git Context
        run: jf rt build-add-git ${{ vars.BUILD_NAME }} ${{ github.run_number }}

      - name: Decorate Build Info with Environment Variables
        run: jf rt build-collect-env ${{ vars.BUILD_NAME }} ${{ github.run_number }}

      - name: Publish Build Info
        run: jfrog rt build-publish ${{ vars.BUILD_NAME }} ${{ github.run_number }}

      - name: Sign Build Evidence
        run: |
          echo '{ "actor": "${{ github.actor }}", "date": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'" }' > sign.json
          jf evd create \
          --build-name ${{ vars.BUILD_NAME }} \
          --build-number ${{ github.run_number }} \
          --predicate ./sign.json --predicate-type https://jfrog.com/evidence/build-signature/v1 \
          --key "${{ secrets.PRIVATE_KEY_NAME }}" \
          --key-alias ${{ env.KEY_ALIAS }}
          echo '🔎 Evidence attached: `build-signature` 🔏 ' >> $GITHUB_STEP_SUMMARY

      - name: Create Release Bundle
        run: |
          echo '{ "files": [ {"build": "'"${{ vars.BUILD_NAME }}/${{ github.run_number }}"'" } ] }' > bundle-spec.json
          jf release-bundle-create ${{ vars.BUNDLE_NAME }} ${{ github.run_number }} \
          --signing-key ${{ secrets.GPG_KEY_NAME }} \
          --spec bundle-spec.json \
          --project ${{ vars.PROJECT_NAME }} \
          --sync=true
          NAME_LINK=${{ vars.ARTIFACTORY_URL }}'/ui/artifactory/lifecycle/?bundleName='${{ vars.BUNDLE_NAME }}'&bundleToFlash='${{ vars.BUNDLE_NAME }}'&repositoryKey=release-bundles-v2&activeKanbanTab=promotion'
          VER_LINK=${{ vars.ARTIFACTORY_URL }}'/ui/artifactory/lifecycle/?bundleName='${{ vars.BUNDLE_NAME }}'&bundleToFlash='${{ vars.BUNDLE_NAME }}'&releaseBundleVersion='${{ github.run_number }}'&repositoryKey=release-bundles-v2&activeVersionTab=Version%20Timeline&activeKanbanTab=promotion'
          echo '📦 Release bundle ['${{ vars.BUNDLE_NAME }}']('${NAME_LINK}'):['${{ github.run_number }}']('${VER_LINK}') created' >> $GITHUB_STEP_SUMMARY


  Promote-To-QA-And-Test:
    needs: Docker-Build-With-Evidence
    runs-on: ubuntu-latest
    steps:
      - name: Install JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        id: cli
        env:
          JF_URL: ${{ vars.JF_URL }}
          JF_PROJECT: ${{ vars.PROJECT_NAME }}
        with:
          oidc-provider-name: github-oidc-integration
          oidc-audience: jfrog-github
          disable-auto-build-publish: true
          
      - name: Promote to QA
        run: |
          jf release-bundle-promote ${{ vars.BUNDLE_NAME }} ${{ github.run_number }} QA \
          --project ${{ vars.PROJECT_NAME }} \
          --signing-key ${{ secrets.GPG_KEY_NAME }} \
          --sync=true
          echo "🚀 Succesfully promote to \`QA\` environemnt" >> $GITHUB_STEP_SUMMARY

      - name: Evidence on release-bundle
        run: |
          echo '{ "actor": "${{ github.actor }}", "date": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'", "test": "CI test", "result": "success" }' > test_evidence.json
          JF_LINK=${{ vars.ARTIFACTORY_URL }}'/ui/artifactory/lifecycle/?bundleName='${{ vars.BUNDLE_NAME }}'&bundleToFlash='${{ vars.BUNDLE_NAME }}'&releaseBundleVersion='${{ github.run_number }}'&repositoryKey=release-bundles-v2&activeVersionTab=Version%20Timeline&activeKanbanTab=promotion'
          echo 'Test on Release bundle ['${{ vars.BUNDLE_NAME }}':'${{ github.run_number }}']('${JF_LINK}') success' >> $GITHUB_STEP_SUMMARY
          jf evd create \
          --release-bundle ${{ vars.BUNDLE_NAME }} \
          --release-bundle-version ${{ github.run_number }} \
          --predicate ./test_evidence.json \
          --predicate-type https://jfrog.com/evidence/testing-results/v1 \
          --key "${{ secrets.PRIVATE_KEY }}" \
          --key-alias ${{ env.KEY_ALIAS }}
          echo '🔎 Evidence attached: integration-test 🧪 ' >> $GITHUB_STEP_SUMMARY


  Policy-Check-And-Promote-To-Prod:
    needs: Promote-To-QA-And-Test
    runs-on: ubuntu-latest
    steps:

      - name: Install JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        id: cli
        env:
          JF_URL: ${{ vars.JF_URL }}
          JF_PROJECT: ${{ vars.PROJECT_NAME }}
        with:
          oidc-provider-name: github-oidc-integration
          oidc-audience: jfrog-github
          disable-auto-build-publish: true

      - name: Checkout
        uses: actions/checkout@v4

      - name: Install OPA
        run: |
          curl -L -o opa https://openpolicyagent.org/downloads/latest/opa_linux_amd64
          chmod +x opa
          sudo mv opa /usr/local/bin/

      - name: Call GraphQL
        run: |
          ./scripts/graphql.sh ${{ vars.ARTIFACTORY_URL }} ${{ secrets.ARTIFACTORY_ACCESS_TOKEN }} release-bundles-v2 ${{ vars.BUNDLE_NAME }} ${{ github.run_number }} ./evidence-graph.json
          cat ./evidence-graph.json

      - name: Run policy
        id: run_policy
        run: |
          opa eval --input ./evidence-graph.json --data ./policy/policy.rego "data.policy.output" | jq '.result[0].expressions[0].value'  > policy.json
          result=$(jq .approved ./policy.json)
          echo "RESULT=$result" >> $GITHUB_ENV

      - name: Promote to Production
        run: |
          if [ "${{ env.RESULT }}" == "true" ]; then
            jf evd create \
            --key "${{ secrets.PRIVATE_KEY }}" \
            --key-alias ${{ env.KEY_ALIAS }} \
            --release-bundle ${{ vars.BUNDLE_NAME }} \
            --release-bundle-version ${{ github.run_number }} \
            --predicate ./policy.json \ 
            --predicate-type https://jfrog.com/evidence/approval/v1
            jf release-bundle-promote ${{ vars.BUNDLE_NAME }} ${{ github.run_number }} PROD \
            --signing-key PGP-RSA-2048  \
            --sync=true
            echo "🚀 Succesfully promote to \`PROD\` environemnt" >> $GITHUB_STEP_SUMMARY
          else
            echo "Fail promotion policy check" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi